import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateJobDto } from './dto/create-job.dto';
import { UpdateJobDto } from './dto/update-job.dto';
import { JobDescriptionService } from './job-description.service';

@Injectable()
export class JobsService {
  constructor(
    private prisma: PrismaService,
    private jobDescriptionService: JobDescriptionService,
  ) {}

  async findAll() {
    return this.prisma.job.findMany({
      orderBy: {
        createdAt: 'desc',
      },
    });
  }

  async findOne(id: number) {
    const job = await this.prisma.job.findUnique({
      where: { id },
    });

    if (!job) {
      throw new NotFoundException(`Job with ID ${id} not found`);
    }

    return job;
  }

  async create(createJobDto: CreateJobDto) {
    const { autoGenerateDescription, ...jobData } = createJobDto;
    
    // If auto-generate flag is set, use the AI service to generate a description
    if (autoGenerateDescription) {
      try {
        jobData.description = await this.jobDescriptionService.generateDescription(jobData.title);
      } catch (error) {
        throw new BadRequestException(`Failed to auto-generate description: ${error.message}`);
      }
    }

    return this.prisma.job.create({
      data: jobData,
    });
  }

  async update(id: number, updateJobDto: UpdateJobDto) {
    try {
      return await this.prisma.job.update({
        where: { id },
        data: updateJobDto,
      });
    } catch (error) {
      throw new NotFoundException(`Job with ID ${id} not found`);
    }
  }

  async remove(id: number) {
    try {
      return await this.prisma.job.delete({
        where: { id },
      });
    } catch (error) {
      throw new NotFoundException(`Job with ID ${id} not found`);
    }
  }
} 